
input {
  file {
    id => "nginx_access"
    path => ["/var/log/nginx/access.log"]
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb_access"
    mode => "read"
    codec => "plain"
  }

  file {
    id => "nginx_error"
    path => ["/var/log/nginx/error.log"]
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb_error"
    mode => "read"
    codec => "plain"
  }
}

filter {
  # Опит за JSON parse на access логовете (ние ги логваме в JSON формат от Nginx)
  json {
    source => "message"
    target => "nginx"
    # Ако редът не е JSON (например от error.log), просто ще пропусне тихо
  }

  # Пренасяме често използвани полета на най-горно ниво за удобство
  mutate {
    rename => { "[nginx][status]" => "status" }
    rename => { "[nginx][request]" => "request" }
    rename => { "[nginx][remote_addr]" => "remote_addr" }
    rename => { "[nginx][http_user_agent]" => "user_agent" }
    rename => { "[nginx][http_referer]" => "http_referer" }
    rename => { "[nginx][request_time]" => "request_time" }
    rename => { "[nginx][upstream_response_time]" => "upstream_response_time" }
    rename => { "[nginx][host]" => "host" }
    rename => { "[nginx][uri]" => "uri" }
    rename => { "[nginx][request_method]" => "request_method" }
    rename => { "[nginx][body_bytes_sent]" => "bytes" }
  }

  # Задаваме @timestamp от полето time (ISO 8601 от Nginx), ако го има
  date {
    match => [ "[nginx][time]", "ISO8601" ]
    target => "@timestamp"
    timezone => "UTC"
    tag_on_failure => []
  }

  # Маркираме източника на събитието
  if [path] =~ "access.log" {
    mutate { add_field => { "log_type" => "nginx_access" } }
  } else if [path] =~ "error.log" {
    mutate { add_field => { "log_type" => "nginx_error" } }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "nginx-%{+YYYY.MM.dd}"
    # За dev: без security. В prod активирай xpack.security и използвай credentials/SSL.
  }
  # Полезно за дебъг при нужда:
  # stdout { codec => rubydebug }
}
